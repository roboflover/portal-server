generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                Int      @default(autoincrement()) @id
  email             String   @unique
  name              String?
  password          String
  avatar            String?  // Поле для хранения URL аватара пользователя
  verificationToken String?  // Поле для хранения токена подтверждения
  isEmailVerified   Boolean  @default(false) // Поле для отслеживания подтверждения email
  posts             Post[]
  role              String   @default("user")
}

model Post {
  id        Int      @default(autoincrement()) @id
  title     String
  content   String?
  published Boolean? @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  date        DateTime
  tickets     Ticket[]
}

model Ticket {
  id        Int     @id @default(autoincrement())
  eventId   Int
  userId    Int
  promocode String?
  event     Event   @relation(fields: [eventId], references: [id])
}

model Cat {
  id    Int    @id @default(autoincrement())
  name  String
  age   Int
  breed String
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  products    Product[] @relation("CategoryProducts")
}

model Product {
  id              Int       @id @default(autoincrement())
  title           String
  description     String?
  price           Float
  oldPrice        Float?
  rating          Float?
  images          Image[]   @relation("ProductImages")
  links           String[]  // Массив строк для хранения ссылок
  categoryId      Int?
  category        Category? @relation("CategoryProducts", fields: [categoryId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt 
  catalogs        Catalog[] @relation("CatalogProducts")
  pinnedInCatalog Catalog[] @relation("PinnedProduct")
  isPinned        Boolean   @default(false)
}

model Catalog {
  id               Int       @id @default(autoincrement())
  title            String
  description      String?
  date             DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt 
  images           Image[]   @relation("CatalogImages")
  links            String[]  // Массив строк для хранения ссылок
  pinnedProductId  Int?
  pinnedProduct    Product?  @relation("PinnedProduct", fields: [pinnedProductId], references: [id])
  products         Product[] @relation("CatalogProducts")
  isPinned        Boolean   @default(false)
}

model Exhibition {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  date        DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt 
  images      Image[]   @relation("ExhibitionImages")
  links       String[]  // Массив строк для хранения ссылок
  isPinned    Boolean   @default(false) 
}

model News {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  date        DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt 
  images      Image[]   @relation("NewsImages")
  links       String[]  // Массив строк для хранения ссылок
  isPinned    Boolean   @default(false)
}

model Image {
  id           Int       @id @default(autoincrement())
  url          String
  exhibitionId Int?      // Поле для связи с выставками
  newsId       Int?      // Поле для связи с проектами
  productId    Int?      // Поле для связи с продуктами
  catalogId    Int?      // Поле для связи с каталогом
  exhibition   Exhibition? @relation("ExhibitionImages", fields: [exhibitionId], references: [id])
  news         News?       @relation("NewsImages", fields: [newsId], references: [id])
  catalog      Catalog?    @relation("CatalogImages", fields: [catalogId], references: [id])
  product      Product?    @relation("ProductImages", fields: [productId], references: [id])

}