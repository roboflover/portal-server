generator client {
  provider = "prisma-client-js"
  // inaryTargets = ["native", "debian-openssl-1.1.x"]
  // binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  // binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  // url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model OrderCatalog {
  id               Int             @id @default(autoincrement())
  orderNumber      Int?   
  orderTitle       String? 
  orderDescription String?         
  quantity         Int?  
  summa            Float?
  deliveryAddress  String?
  customerName     String?
  customerEmail    String?
  customerPhone    String?
  orderStatus      String?
  comment          String?
}

model OrderPrint3d {
  id               Int @id @default(autoincrement())
  orderNumber      String?            
  quantity         Int
  summa            Float
  fileSize         Float
  fileName         String
  material         String
  width            Float
  length           Float
  height           Float
  volume           Float
  color            String
  orderDetails     String?
  shoppingCartItems ItemPrint3d[]
  deliveryAddress  String?
  deliveryCity     String?
  deliveryCoast    Float?
  selfPickup       Boolean? @default(false)
  customerName     String
  customerEmail    String
  customerPhone    String
  orderStatus      String?
  comment          String?
  modelUrl         String?
  disable          Boolean? @default(false)
  paymentId        String?
  models3d         Model3d[]
  cdekEntityUuid   String?
  creationTime     DateTime @default(now())
}

model Model3d {
  id           Int           @id @default(autoincrement())
  modelName    String
  modelUrl     String
  orderPrint3d OrderPrint3d? @relation(fields: [orderPrint3dId], references: [id])
  orderPrint3dId Int?
}

model ItemPrint3d {
  id            Int           @id @default(autoincrement())
  itemName      String
  itemQuantity  Int
  itemPrice     Float
  itemDetails   String        // Поле хранит описание или дополнительные детали для объекта
  item3DModel   String        // Поле для ссылки на 3D модель
  orderId       Int
  order         OrderPrint3d   @relation(fields: [orderId], references: [id])
}

model User {
  id                Int      @default(autoincrement()) @id
  email             String   @unique
  name              String?
  password          String
  avatar            String?  // Поле для хранения URL аватара пользователя
  verificationToken String?  // Поле для хранения токена подтверждения
  isEmailVerified   Boolean  @default(false) // Поле для отслеживания подтверждения email
  posts             Post[]
  role              String   @default("user")
  emailVerificationTokens EmailVerificationToken[] // Связь с токенами верификации
}

model EmailVerificationToken {
  token   String @id
  userId  Int
  user    User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Post {
  id        Int      @default(autoincrement()) @id
  title     String
  content   String?
  published Boolean? @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  date        DateTime
}

model Ticket {
  id        Int     @id @default(autoincrement())
  title     String
  description String?
  price     String?
  oldPrice  Float?
  promocode String?
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt 
  isDelete  Boolean?
}

model OrderTicket {
  id        Int     @id @default(autoincrement())
  title     String
  description String?
  price     String?
  count     Int?
  paymentId String?
  isDelete  Boolean?
  email     String?
}

model Cat {
  id    Int    @id @default(autoincrement())
  name  String
  age   Int
  breed String
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  products    Product[] @relation("CategoryProducts")
}

model Product {
  id              Int       @id @default(autoincrement())
  title           String
  description     String?
  price           Float
  oldPrice        Float?
  rating          Float?
  images          Image[]   @relation("ProductImages")
  links           String[]  // Массив строк для хранения ссылок
  categoryId      Int?
  category        Category? @relation("CategoryProducts", fields: [categoryId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt 
  catalogs        Catalog[] @relation("CatalogProducts")
  pinnedInCatalog Catalog[] @relation("PinnedProduct")
  isPinned        Boolean   @default(false)
}

model Catalog {
  id               Int       @id @default(autoincrement())
  title            String
  description      String?
  date             DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt 
  images           Image[]   @relation("CatalogImages")
  links            String[]  // Массив строк для хранения ссылок
  pinnedProductId  Int?
  pinnedProduct    Product?  @relation("PinnedProduct", fields: [pinnedProductId], references: [id])
  products         Product[] @relation("CatalogProducts")
  isPinned        Boolean   @default(false)
}

model Exhibition {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  date        DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt 
  images      Image[]   @relation("ExhibitionImages")
  links       String[]  // Массив строк для хранения ссылок
  isPinned    Boolean   @default(false) 
}

model News {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  date        DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt 
  images      Image[]   @relation("NewsImages")
  links       String[]  // Массив строк для хранения ссылок
  isPinned    Boolean   @default(false)
}

model Image {
  id           Int       @id @default(autoincrement())
  url          String
  exhibitionId Int?      // Поле для связи с выставками
  newsId       Int?      // Поле для связи с проектами
  productId    Int?      // Поле для связи с продуктами
  catalogId    Int?      // Поле для связи с каталогом
  exhibition   Exhibition? @relation("ExhibitionImages", fields: [exhibitionId], references: [id])
  news         News?       @relation("NewsImages", fields: [newsId], references: [id])
  catalog      Catalog?    @relation("CatalogImages", fields: [catalogId], references: [id])
  product      Product?    @relation("ProductImages", fields: [productId], references: [id])
}

model Review3dPrint {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  date        DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  images      ReviewImage[]   @relation("ReviewImages")
  links       String[]  // Массив строк для хранения ссылок
  isPinned    Boolean   @default(false)
}

model ReviewImage {
  id           Int      @id @default(autoincrement())
  url          String
  review       Review3dPrint?  @relation("ReviewImages", fields: [reviewId], references: [id])
  reviewId     Int?
  createdAt    DateTime @default(now())
}